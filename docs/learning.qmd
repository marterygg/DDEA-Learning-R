---
title: "Reproducible document"
author: "Marte Opseth Rygg"
format: html
---

## Basics of R

```{r}
1 + 1
```

## Setup code chunk 

```{r setup}
#| message: false
#| warning: false
library(tidyverse)
post_meal_data <- read.csv2(here::here("data/post-meal-insulin.csv"))
```

## Showing the data 

```{r}
post_meal_data
```


```{r}
glimpse(post_meal_data)
```


## About me 

- Name: Marte Opseth Rygg
- Affiliation: Steno Dibaetes Center Copenhagen 

I am **Norwegian** and love to walk in the *mountains*.

## Simple code 

```{r}
3 * 3
```

## Testing for Git 

Random words. 

## Make a figure 

Figurer navngives automatisk, efter hvor de fremgår i dokumentet. Så den første figur bliver automatisk navngivet "Figure 1". 

```{r}
ggplot(post_meal_data, aes(x = BMI)) + # data, what variables where
  geom_histogram() # what plot I want
```


```{r}
#| fig-cap: "Distribution of BMI"
#| label: fig-bmi-histo
ggplot(post_meal_data, aes(x = BMI)) +
  geom_histogram()
```


```{r}
#| fig-cap: "Excercise: discrete plots."
#| label: fig-group-bar
ggplot(post_meal_data, aes(x = Group)) +
  geom_bar()
```

@fig-group-bar

```{r}
post_meal_data %>%
  ggplot(aes(x = Group, fill = glykemi)) +
  geom_bar()
```
```{r}
post_meal_data %>%
  ggplot(aes(x = Group, fill = as.character(glykemi))) + # Have to convert glykemi fra numeric til vector
  geom_bar()
```

Vi vil gerne have glykemi fordelingen ved siden af hindanden indenfor hver gruppe. 

```{r}
post_meal_data %>%
  ggplot(aes(x = Group, fill = as.character(glykemi))) +
  geom_bar(position = position_dodge())
```

## Få to plots ved siden af hindanden 

```{r}
ggplot(post_meal_data, aes(x = BMI)) +
  geom_histogram()
```

```{r}
ggplot(post_meal_data, aes(x = glykemi)) +
  geom_bar()
```

```{r side-by-side-figs}
#| label: fig-bmi-glycemia
#| fig-cap: "BMI and glycemia, side by side."
#| fig-subcap:
#|   - "Distribution of BMI."
#|   - "Number of those with glycemia."
#| layout-ncol: 2
ggplot(post_meal_data, aes(x = BMI)) +
  geom_histogram()

ggplot(post_meal_data, aes(x = glykemi)) +
  geom_bar()
```

## Plotting two continous variables 

```{r BMI against AUC for plasma glucose}
#| fig-cap: "Scatterplot"
#| label: fig-bmi-auc-pg
ggplot(post_meal_data, aes(x = BMI, y = auc_pg)) +
  geom_point() + # What type of graph do I want
  geom_smooth()
```

```{r}
small_post_meal_data <- select(post_meal_data, id, Age, BMI, Group, auc_pg, auc_ins, glykemi)
```


```{r}
tidier_post_meal_data <- small_post_meal_data |>
  rename(
    auc_glucose = auc_pg,
    auc_insulin = auc_ins
  ) |>
  filter(glykemi == 0) |>
  select(-glykemi)
```

```{r}
tidier_post_meal_data |>
  mutate(
    insulin_glucose_ratio = auc_insulin / auc_glucose,
    Group = if_else(Group == " CTR", "Control", "First-degree relative")
  )
```

## Practice with filter and mutate

```{r}
post_meal_data |>
  filter(BMI >= 20 & BMI <= 40 & Group == "FDR")
```

16 people

```{r}
post_meal_data |>
  mutate(
    percent_body_fat = (Fat.mass.DXA / Weight) * 100
  ) |>
  filter(percent_body_fat > 30)
```

## Vizualizing with jitter plot

```{r}
tidied_post_meal_data <- tidier_post_meal_data |>
  mutate(
    insulin_glucose_ratio = auc_insulin / auc_glucose,
    Group = if_else(Group == "CTR", "Control", "First-degree relative")
  )
```

```{r}
tidied_post_meal_data |>
  mutate(overweight = if_else(BMI >= 25, "Overweight", "Not overweight")) |>
  ggplot(aes(x = overweight, y = insulin_glucose_ratio)) +
  geom_jitter()
```

## Plotting three or more variables 

```{r}
tidied_post_meal_data |>
  filter(BMI < 30) |>
  ggplot(aes(x = Age, y = auc_insulin, colour = Group)) +
  geom_point()
```

```{r}
tidied_post_meal_data |>
  filter(BMI < 30) |>
  mutate(
    young = if_else(Age < 40, "Young", "Old")
  ) |>
  ggplot(aes(x = BMI, y = insulin_glucose_ratio, colour = Group)) +
  geom_point() +
  facet_grid(cols = vars(young)) +
  labs(
    x = "Body mass index (BMI)",
    y = "Insulin to glucose ratio"
  )
```

## Make multi-dimensional plots!

```{r}
#| label: fig-multidimensional
#| fig-cap: "Two, mult-dimensional plots of our data."
#| fig-subcap:
#|   - "Distribution of percent body fat by group and age category."
#|   - "Relationship between BMI and bone mineral density, split by insulin sensitivity."
#| layout-ncol: 2
# Task 1.
post_meal_data |>
  mutate(
    percent_body_fat = (Fat.mass.DXA / Weight) * 100,
    young = if_else(Age < 40, "Young", "Old")
  ) |>
  ggplot(aes(x = Group, y = percent_body_fat, colour = young)) +
  geom_jitter(width = 0.2)

# Task 2.
post_meal_data |>
  mutate(
    insulin_glucose_ratio = (auc_ins / auc_pg),
    insulin_insensitive = if_else(insulin_glucose_ratio > mean(insulin_glucose_ratio), "Insensitive", "Sensitive")
  ) |>
  ggplot(aes(x = BMI, y = Bone.mineral.DXA, colour = insulin_insensitive)) +
  geom_point() +
  geom_smooth() +
  facet_grid(cols = vars(insulin_insensitive))
```

## Changing colours

```{r}
# Tasks 1. and 2.
post_meal_data |>
  mutate(hyperglycemia = if_else(glykemi == 1, "Yes", "No")) |>
  ggplot(aes(x = Group, fill = hyperglycemia)) +
  geom_bar(position = position_dodge()) +
  scale_fill_viridis_d(option = "cividis")

# Tasks 3. and 4.
post_meal_data |>
  ggplot(aes(x = auc_pg, y = auc_ins, colour = BMI)) +
  geom_point() +
  scale_colour_viridis_c(option = "magma")
```

## Calculating summary statistics 

```{r}
tidied_post_meal_data %>%
  summarise(
    max_bmi = max(BMI),
    min_BMI = min(BMI)
  )
```

## Summarise with splitting 

```{r}
#| label: tbl-mean-age-bmi
#| tbl-cap: "Mean values of age and BMI for each group"
tidied_post_meal_data %>%
  group_by(Group) %>%
  summarise(
    "Mean age (years)" = round(mean(Age), 1),
    "Mean BMI (kg/m^2^" = round(mean(BMI), 1)
  ) %>%
  ungroup() %>%
  knitr::kable() # Få en penere tabel
```

See @tbl-mean-age-bmi 

## Bigger table

```{r}
#| label: tbl-summary-table
#| tbl-cap: "Median values of AUC measurements by age group and family history group."
post_meal_data |>
  # Task 2.
  filter(BMI < 30) |>
  # Task 3.
  mutate(
    age_group = if_else(Age < 40, "Young", "Old"),
    Group = if_else(Group == "CTR", "Control", "First-degree relative")
  ) |>
  # Task 4.
  group_by(Group, age_group) |>
  summarise(
    "AUC C-peptide" = round(median(auc_cp), 1),
    "AUC Glucose" = round(median(auc_pg), 1),
    "AUC Insulin" = round(median(auc_ins), 1)
  ) |>
  # Task 5.
  rename(
    "Age group" = age_group,
    "Family history" = Group
  ) |>
  # Task 6.
  ungroup() |>
  knitr::kable()
```

See @tbl-___, very nice table! :D
